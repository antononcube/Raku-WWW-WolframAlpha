#!/usr/bin/env raku
use v6.d;

use WWW::WolframAlpha;
use WWW::WolframAlpha::Request;

my %*SUB-MAIN-OPTS =
        :named-anywhere,
        # allow named variables at any location
        ;

#| Text processing using the WolframAlpha API.
multi sub wolfram-alpha-front(Str $text,                                #= Text to be processed or audio file name.
                              Str :$path = 'result',                    #= Path, one of 'result', 'simple', or 'query'.
                              Str :$output-format is copy = 'Whatever', #= The format in which the response is returned.
                              Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use WolframAlpha API.)
                              UInt :$timeout= 10,                       #= Timeout.
                              Str :f(:$format) is copy = 'Whatever',    #= Format of the result; one of "json", "hash", "values", or "Whatever".
                              Str :$method is copy = 'tiny',            #= Method for the HTTP POST query; one of "tiny" or "curl".
                              ) {

    if $text.chars == 0 {
        note 'Nothing.';
        return;
    }

    $auth-key = get-auth-key($auth-key);

    if $format.lc ∈ <auto automatic whatever> { $format = 'asis'; }

    my $outputFormatLocal = $output-format.lc ∈ <whatever automatic auto> ?? Whatever !! $output-format;
    my $res =
            wolfram-alpha($text,
                    :$path,
                    output-format => $outputFormatLocal,
                    :$auth-key,
                    :$timeout,
                    :$format,
                    :$method);

    if $format.lc ∈ <hash raku> {
        say $res.raku;
    } else {
        say $res;
    }
}

multi sub MAIN
#= Command given as a sequence of words.
(*@words,
 Str :$path = 'result',                    #= Path, one of 'result', 'simple', or 'query'.
 Str :$output-format = 'Whatever',         #= The format in which the response is returned.
 Str :a(:$auth-key) is copy = 'Whatever',  #= Authorization key (to use WolframAlpha API.)
 UInt :$timeout= 10,                       #= Timeout.
 Str :f(:$format) is copy = 'Whatever',    #= Format of the result; one of "json", "hash", "values", or "Whatever".
 Str :$method is copy = 'tiny',            #= Method for the HTTP POST query; one of "tiny" or "curl".
 ) {
    return wolfram-alpha-front(@words.join(' ').Str, :$path, :$output-format, :$auth-key, :$timeout, :$format, :$method);
}